<?php

namespace Filix\CaijiBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Filix\CaijiBundle\Entity\User;

/**
 * LogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LogRepository extends EntityRepository
{
    public function getUserLogs(User $user, $begin_day, $end_day){
        //echo sprintf('%s ----- %s', $begin_day, $end_day);
        return $this->getEntityManager()
                        ->createQueryBuilder()
                        ->select('l')
                        ->from('FilixCaijiBundle:Log', 'l')
                        ->where('l.user = :user')
                        ->andWhere("l.created_at >= :time_begin")
                        ->andWhere("l.created_at <= :time_end")
                        ->orderBy('l.created_at', 'asc')
                        ->getQuery()
                        ->setParameter('user', $user)
                        ->setParameter('time_begin', $begin_day)
                        ->setParameter('time_end', $end_day)
                        ->getResult();
    }
    
    public function getLog($user, $time){
        return $this->getEntityManager()
                        ->createQueryBuilder()
                        ->select('l')
                        ->from('FilixCaijiBundle:Log', 'l')
                        ->where('l.user = :user')
                        ->andWhere("l.created_at = :time")
                        ->setMaxResults(1)
                        ->getQuery()
                        ->setParameter('user', $user)
                        ->setParameter('time', $time)
                        ->getResult();
    }
    
    public function getLogsBeforeToday($user){
        $time = date('Y-m-d 00:00:00');
        return $this->getEntityManager()
                        ->createQueryBuilder()
                        ->select('l')
                        ->from('FilixCaijiBundle:Log', 'l')
                        ->where('l.user = :user')
                        ->andWhere("l.created_at < :time")
                        ->getQuery()
                        ->setParameter('user', $user)
                        ->setParameter('time', $time)
                        ->getResult();
    }
}
